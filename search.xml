<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo-asset-image与hexo-abbrlink带给我的苦恼]]></title>
    <url>%2Fblog%2F2897252909.html</url>
    <content type="text"><![CDATA[hexo-abbrlink是设置永久链接的插件,hexo-asset-image是设置图片地址的插件,分开了用皆大欢喜,但当我们都用上后发现会出现各种问题.愁死个人呐! 😂😂😂 本文记录了几个个人遇到的问题及最终的解决方法 hexo-asset-image介绍首先当我们启用了hexo-asset-image后,会设置next/_config.yml的post_asset_folder节点为ture 1post_asset_folder: true 这个时候当我们运行 hexo new “test”,生成一篇文章后,在同级目录下会生成一个同名的(test)文件夹,我们文章里的图片都需要放入这个文件夹里,结构如下 123├── test│ └── banner.jpg└── test.md 这样在markdown里引用文件就可以写成这样 1![banner图片](test/banner.jpg) 然后hexo g 生成的页面中就可以看到图片了. 如何你的图片都正常显示,那恭喜你.接下来的文章你可以不看了…………….. 问题1 permalink=:abbrlink.html 显示异常 将permalink=:abbrlink.html 设置为.html后缀时,可以将网站模拟成伪静态.这对SEO是有好处的,但是这会导致heox-asset-image替换图片地址是出现bug,百度,google了半天没找到解决办法(ps:倒是看了一堆废话),最后想到了直接上GitHub hexo-asset-image 上去看看项目的issue,结果还真有.嘿嘿嘿😝. 有好几个issue都有提到这个问题,比如issue-21,issue-19,但是作者自己也没有解决,最后在issue-48里找到了答案.然后自己修改了下hexo-asset-image 插件的 index.js(位置在站点根目录/node_modules/hexo-asset-image/index.js),最终解决!!!,加入下面代码到指定位置即可 123else if(/.*\.html$/.test(link))&#123; var endPos = link.length-5; &#125; 这样当你的permalink设置为下面几种格式,图片都是可以正常显示的 1234permalink: :abbrlink.html --&gt; http://localhost:4000/blog/3632233996.htmlpermalink: :abbrlink/ --&gt; http://localhost:4000/blog/3632233996/permalink: :year/:month/:day/:title/ --&gt; http://localhost:4000/blog/2019/10/11/test/permalink: :year/:month/:day/:title/index.html --&gt; http://localhost:4000/blog/2019/10/11/test/index.html 问题2 站点运行在子目录下时 显示异常 由于我的博客是运行在子目录的.next/_config.yml配置如下. 12url: https://jianxin-yuan.github.io/blog/root: /blog/ 所有在hexo-asset-image替换图片的时候会将/blog/重复2次,导致图片无法正常显示,如下 这个问题同样是在 issue-52 上找到的答案 修改index.js 12345var directory_Depth = 3;var child_Depth = config.root.split("/").length - 2;directory_Depth = child_Depth &gt; 0 ? directory_Depth + child_Depth : directory_Depth; var beginPos = getPosition(link, '/', directory_Depth) + 1; 后续版本不知道作者会不会修复这些问题.提了个PR,也不知道会不会采纳…愁啊….. 总结百度不出来? google还不行? 那就上项目的GitHub上去找答案吧.项目的issue里藏了无数的宝藏]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo-asset-image</tag>
        <tag>hexo-abbrlink</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring-boot-devtools 热部署]]></title>
    <url>%2Fblog%2F1584421437.html</url>
    <content type="text"><![CDATA[开发过程中,热部署是一个十分重要的功能,避免了频繁重启应用带来的时间上的浪费,Spring Boot作为当前最火的java企业级应用开发框架.自然也是提供了相应功能.spring-boot-devtools是Spring Boot提供的一个开发工具模块,提供了一系列好用的功能,使应用程序开发更加快速和高效. 依赖 aven 1234567&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;&lt;/dependencies&gt; Gradle 123456789configurations &#123; developmentOnly runtimeClasspath &#123; extendsFrom developmentOnly &#125;&#125;dependencies &#123; developmentOnly("org.springframework.boot:spring-boot-devtools")&#125; 加入spring-boot-devtools后,当类路径下的文件发生变化时,应用程序就会重新启动.不过这个启动比正常手动重启会快很多. 这源于spring boot 重启技术使用2个类加载器,不会更改的类(如第三方jar包等)加载到一个base classloader中,我们正在开发的类将加载到restart classloader中.重启应用程序时,只会重启restart classloader,这样避免了大量第三方类的加载,节省了大量时间. IDEA中配置 由于spring-boot-devtools只有在检测到类路径下的文件变化时才会触发重启,而IDEA是默认是不会自动编译文件的.所以会出现修改了类文件,html.js等.但没有重启的情况.这里介绍2种解决方法 方式1:修改springboot configuration实现(个人推荐) 点击Run &gt; Edit Configurations 进入配置页面 将 on frame deactivation 修改为 update classes and resoruce,这个表示idea失去焦点时(如切换到浏览器或其他界面)更新class 和resource,然后就会触发spring-boot-devtools的重启机制了. 方式2:修改idea为自动编译 进入Preferences &gt; compiler,勾选build project automatically 双击shift,输入registry 勾选compiler.automake.allow.when.app.running 即可开启idea的自动编译,重启项目,修改文件.可以看到spring boot会重启了 使用触发文件 有时我们不希望每次更改都重启应用.这时可以使用触发文件来实现.当我们希望应用重启的时候,只需要修改这个特殊的文件spring-boot-devtools检测到这个文件改变了.就会触发重启. 1spring.devtools.restart.trigger-file= #触发文件路径 自定义重启类加载器 当我们开发一个多模块的项目时,可能我们只是修改很小的一部分代码,但是spring-boot-devtools还是会将整个项目代码重新加载,这会拖慢启动速度.这时我们可以自定义重启类加载器,指定哪些文件需要重启时加载. 创建一个META-INF/spring-devtools.properties文件 12restart.exclude.companycommonlibs=/mycorp-common-[\\w-]+\.jarrestart.include.projectcommon=/mycorp-myproj-[\\w-]+\.jar spring-devtools.properties文件可以包含前缀为restart.exclude和restart.include的属性。include元素表示重启时需要重新加载的项目，exclude元素表示下沉到 base classesloader的项目,只在第一次启动时加载,后续重启不重新加载.该属性的值是应用于类路径的正则表达式模式,所有属性键必须是唯一的,只要属性以restart.include.或restart.exclude.开头,就会被考虑.]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>热部署</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT进阶配置]]></title>
    <url>%2Fblog%2F3790268221.html</url>
    <content type="text"><![CDATA[前言本文主要介绍Next的一些进阶配置,如集成评论系统,本地搜索,进度条等.各种第三方服务集成,个人定制化.能让你的博客具备完善的功能…. 进阶配置设置永久链接 设置永久链接有利于SEO,即使后续文章title变化,也不会博客访问路径造成影响,在站点根目录运行下面命令安装依赖 1npm install hexo-abbrlink --save 修改hexo/_config.yml下的permalink配置,并新增abbrlink节点内容 1234567permalink: posts/:abbrlink/# abbrlink config## https://github.com/rozbo/hexo-abbrlinkabbrlink: alg: crc32 # support crc16(default) and crc32 rep: dec # support dec(default) and hex alg和rep可选择不同组合方案,下面是各种组合的效果,可以自行选择喜欢的组合 本地搜索 本地搜索不需要第三方服务,只需要添加依赖就可以了,在站点根目录运行下面命令安装依赖 1npm install hexo-generator-searchdb --save 在hexo/_config.yml下添加下列配置 123456# local searchsearch: path: search.xml field: post format: html limit: 10000 修改next/_config.yml下面的local_search节点内容 1234567891011121314# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true #开启服务 # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto #自动触发搜索 #trigger: manual #手动触发 # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 此时菜单栏就会出下搜索🔍了, 如果你前面在menu配置项里有配置搜索的话,这里会出现2个搜索,把菜单里的搜索注释掉就行了 顶部阅读进度条 进入themes/next目录,运行下面的命令 1git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress 修改next/_config.yml下的reading_progress节点,注意不是vendors下的reading_progress 123456# Reading progress bar# Dependencies: https://github.com/theme-next/theme-next-reading-progressreading_progress: enable: true #启用 color: "#37c6c0" #颜色 height: 2px #高度 文章加载进度条 进入themes/next目录,运行下面的命令 1git clone https://github.com/theme-next/theme-next-pace source/lib/pace 修改next/_config.yml下的pace节点,注意不是vendors下的pace 123456pace: enable: true #启用 # Themes list: # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal theme: flash #加载样式 文章字数统计和阅读时间 进入站点根目录,运行命令安装插件 1npm install hexo-symbols-count-time --save 修改hexo/_config.yml,添加下列内容 12345678# Hexo plugin: hexo-symbols-count-time# https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: symbols: true # 文章字数统计 time: true # 文章预计阅读时间 total_symbols: true # 页面底部站点总字数统计 total_time: true # 页面底部站点总阅读时间预计 exclude_codeblock: false #是否排除代码块内容 修改next/_config.yml下的symbols_count_time节点 12345678# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true #是否换行显示 item_text_post: true #是否显示文章统计的文本说明 item_text_total: true #是否显示站点统计的文本说明 awl: 2 #平均字长 wpm: 300 #阅读速度 分享按钮 进入themes/next目录,运行下列命令 1git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton 修改next/_config.yml下的NeedMoreShare2节点 12345678910111213141516171819202122232425# NeedMoreShare2# Dependencies: https://github.com/theme-next/theme-next-needmoreshare2# For more information: https://github.com/revir/need-more-share2# iconStyle: default | box# boxForm: horizontal | vertical# position: top / middle / bottom + Left / Center / Right# networks:# Weibo | Wechat | Douban | QQZone | Twitter | Facebook | Linkedin | Mailto | Reddit | Delicious | StumbleUpon | Pinterest# GooglePlus | Tumblr | GoogleBookmarks | Newsvine | Evernote | Friendfeed | Vkontakte | Odnoklassniki | Mailruneedmoreshare2: enable: true #启用分享功能 postbottom: enable: true #启用文章结尾分享按钮 options: iconStyle: default boxForm: horizontal #horizontal表示分享列表水平排列,vertical表示竖直排列 position: topCenter #表示在按钮上部中间出现分享列表top / middle / bottom + Left / Center / Right 可自由组合,如topLeft,表示上部左边,bottomCenter表示下部中间 networks: Weibo,Wechat,Douban,QQZone #分享的平台 float: enable: false #启用侧边栏分享按钮 options: iconStyle: default boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook 个性化回到顶部 就是右侧那个猫咪啦→→→,首先找一张喜欢的图片,将图片放入/hexo/source/images/目录下, 点击下载 修改next/_config.yml下的custom_file_path节点 1234567891011custom_file_path: #head: source/_data/head.swig #header: source/_data/header.swig #sidebar: source/_data/sidebar.swig #postMeta: source/_data/post-meta.swig #postBodyEnd: source/_data/post-body-end.swig #footer: source/_data/footer.swig #bodyEnd: source/_data/body-end.swig #variable: source/_data/variables.styl #mixin: source/_data/mixins.styl style: source/_custom/custom.styl # 根目录下的/source/,不是主题下的/source/ 在hexo/source/目录下新建_custom目录,添加custom.styl文件,加入下面的内容 123456789101112131415161718//自定义回到顶部样式.back-to-top &#123; right: 25px; width: 70px; //图片素材宽度 height: 900px; //图片素材高度 top: -900px; //bottom: unset; transition: all .5s ease-in-out; background url("../images/scroll.png") //隐藏箭头图标 &gt; i &#123; display: none; &#125; &amp;.back-to-top-on &#123; bottom: unset; top: 100vh &lt; (900px + 200px) ? calc( 100vh - 900px - 200px ) : 0px; &#125;&#125; 注意:这里需要将next/_config.yml下的侧边栏回到顶部back2top.sidebar关掉,不然会有点小问题 1234567&gt; back2top:&gt; enable: true&gt; # Back to top in sidebar.&gt; sidebar: false&gt; # Scroll percent label in b2t button.&gt; scrollpercent: true&gt; 图片放大预览 图片预览可以使用fancybox或者mediumzoom,但是不要同时启用2个,不然会出现2次预览 fancybox安装. 进入themes/next目录,运行命令 1git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox 修改next/_config.yml下的fancybox节点 123456# Fancybox. There is support for old version 2 and new version 3.# Choose only one variant, do not need to install both.# To install 2.x: https://github.com/theme-next/theme-next-fancybox# To install 3.x: https://github.com/theme-next/theme-next-fancybox3# For more information: https://fancyapps.com/fancyboxfancybox: true mediumzoom安装 进入themes/next目录,运行命令 1git clone https://github.com/theme-next/theme-next-mediumzoom source/lib/mediumzoom 修改next/_config.yml下的mediumzoom节点 12345# A JavaScript library for zooming images like Medium.# Do not enable both `fancybox` and `mediumzoom`.# Dependencies: https://github.com/theme-next/theme-next-mediumzoom# For more information: https://github.com/francoischalifour/medium-zoommediumzoom: true 集成Gitalk评论系统 新版的NexT已经集成了几种主流的评论系统.disqus/disqusjs/changyan/valine/gitalk,这里选择的是gitalk,主要是gitalk是基于github的Issue,同时需要登录GitHub账号才能评论.毕竟,如果你要喷我.那也要留下你的大名呀.匿名的键盘侠还是不要评论我的博客了…..🤣🤣🤣,好了,开干… 首先注册一个 OAuth application Application name: 应用名称,随便取 Homepage URL : 你的博客站点Url Application description : 介绍,随便写 Authrization callback URL : 你的博客站点Url 下面是注册成功页面,主要就是Client ID和 Client Secret,如果不小心关闭了页面找不到了.可以从settings &gt; Developer settings &gt; OAuth Apps 找到 修改next/_config.yml下的Gitalk节点 注意:下面配置的repo表示GitHub上一个仓库的名称,因为gitalk是基于GitHub的issue系统的,相当于每次评论是在对应repo的issue上进行留言,这里推荐新建一个repo来专门存放评论,同时repo配置的值是你仓库的名字,而不是git的地址.如果你的仓库是https://github.com/youname/xxx,那repo的值就是xxx 123456789101112131415# Gitalk# Demo: https://gitalk.github.io# For more information: https://github.com/gitalk/gitalk, https://github.com/emn178/js-md5gitalk: enable: true #开启 github_id: # GitHub 账号名称 repo: # Repository name to store issues client_id: # 上一步生成的 GitHub Application Client ID client_secret: # 上一步生成的 GitHub Application Client Secret admin_user: # GitHub 账号名称 distraction_free_mode: true # Facebook-like distraction free mode # Gitalk's display language depends on user's browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available values: en | es-ES | fr | ru | zh-CN | zh-TW language: 发布到远程站点,随便进入一篇文章就可以看到评论系统了.第一次需要登录你的GitHub账号,每篇博文都需要所有者进入后进行初始化,不然别人是不能评论的,每篇博文的评论在你的repo中就是一个issue,如果想要清空某个文章的评论,只需要找到对应的的issue关闭掉issue就行了,下次进入这个文章的时候会重新初始化评论… 参考链接 yearito|Hexo 搭建个人博客系列：主题美化篇 wylu|NexT主题进阶配置 NexT Theme Doc]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+NexT主题配置]]></title>
    <url>%2Fblog%2F3790268220.html</url>
    <content type="text"><![CDATA[说一说Hexo是一个十分优秀的博客系统,上手也是十分的容易,当我们将博客搭建好了后,当然是想要一个能满足个人审美的主题,让我们的博客看起来狂拽炫酷高大上…..Hexo有许多许多的主题样式(https://hexo.io/themes/), 可以根据自己的需要选择,下面介绍的是一款十分优秀且受欢迎的主题NexT. NexT GitHub地址 NexT 官方文档 环境说明 Hexo和NexT都是使用的最新的版本,可能一些配置和低版本不一样,若存在不一致的地方.请查看官网文档来查找低版本支持方案… 123hexo: 3.9.0hexo-cli: 2.0.0next: 7.3.0 NexT主题安装使用Hexo有两个主要的配置文件,它们都被称为_config.yml 第一个是在站点根目录下(./_config.xml),其中包含Hexo的配置. 第二个是在主题根目录下(./themes/next/_config.yml),由NexT提供并包含主题的配置. 为了方便区分,我们称第一个 为 站点配置文件(hexo/_config.yml)，第二个 主题配置文件(next/_config.xml) 后续文中出现的路径在站点目录下的用hexo/前缀表示,在主题文件目录下的用next/前缀表示 下载NexT,进入你的hexo博客根目录,运行命令 1git clone https://github.com/theme-next/hexo-theme-next themes/next 修改 hexo/_config.yml 1theme: next 然后重新启动下hexo服务,看看效果吧! NexT个性配置Hexo和NexT都有许多的配置项,这里将一些比较常用的,有更多需求的小伙伴可以多多研究下官方文档,发掘更多好玩的有意思的特性… 主题 NexT有4个风格的主题,通过修改next/_config.yml 下的Scheme即可 123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse# scheme: Mistscheme: Pisces# scheme: Gemini 站点基本信息 站点名称,介绍,语言等基本信息的配置,修改hexo/_config.yml 12345678# Sitetitle: # 网站名称subtitle: #子名称description: #一句简单介绍keywords: #用于SEOauthor: #作者名language: zh-CN #语言,默认是英语,可修改为中文timezone: 头像 修改next/_config.yml下的avatar节点 url表示头像路径,可以在hexo/source目录下建一个uplaods目录存放,也可以直接放到next/source/images/里面,也可以使用一个远程图片地址 rounded表示头像切割为圆形框 rotated表示鼠标点击时头像旋转 12345678910# Sidebar Avataravatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/avatar.gif # If true, the avatar would be dispalyed in circle. rounded: true # If true, the avatar would be rotated with the cursor. rotated: false 菜单栏 修改next/_config.yml下的menu节点,默认配置是只有home和archives的,开启其他的菜单需要建立对应的目录文件,根据需要配置需要的菜单即可. 例:如果需要标签菜单,首先把配置文件下的tags前的#去掉,然后在hexo根目录下运行命令 hexo new page tags ,此时会在hexo/source/目录下会生成/tags/目录,/tags/里有一个index.md文件,打开文件,新增文件type字段配置,,title可随意更改,页面展示使用,其他菜单的操作也是同样的 123456&gt; ---&gt; title: 标签&gt; date: 2019-08-03 20:55:14&gt; type: tags&gt; ---&gt; 12345678910111213141516171819202122232425 # --------------------------------------------------------------- # Menu Settings # --------------------------------------------------------------- # Usage: `Key: /link/ || icon` # Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive. # Value before `||` delimiter is the target link. # Value after `||` delimiter is the name of Font Awesome icon. If icon (with or without delimiter) is not specified, question icon will be loaded.# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives). # External url should start with http:// or https:// menu: home: / || home #主页 #about: /about/ || user #关于我 tags: /tags/ || tags #标签 categories: /categories/ || th #分类 archives: /archives/ || archive #归档 # search: /search/ || search #搜索 #schedule: /schedule/ || calendar 日程表 #sitemap: /sitemap.xml || sitemap 站点地图 #commonweal: /404/ || heartbeat 公益404 # Enable / Disable menu icons / item badges. menu_settings: icons: true #是否显示图标 badges: true #是否显示徽章 404页面 想要定制一个404页面也是十分简单,和生成标签页类似,运行hexo new page 404,会在hexo/source/目录下生成/404/index.md文件.设置文件permalink: /404,并加上这段js(腾讯提供的公益404页面,当然也可以自己定制一些喜欢的404页面),这样当访问不存在的页面时就会显示404自定义的404页面了(本地测试不生效,需要部署到远程看效果) 12345678---title: 404date: 1970-01-01 00:00:00permalink: /404---&lt;script src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="Back to home"&gt;&lt;/script&gt; Favicon 在hexo/source/目录下新建/images/目录,将你的Favicon放入,然后修改next/_config.yml下的favicon节点 关于Favicon的生成,有很多网站都可以在线生成,需要的小伙伴自行百度吧 123456789101112# ---------------------------------------------------------------# Site Information Settings# See: https://theme-next.org/docs/getting-started/# ---------------------------------------------------------------favicon: small: /images/favicon-16x16.png medium: /images/favicon-32x32.png apple_touch_icon: /images/apple-touch-icon.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 代码块 修改next/_config.yml下的codeblock节点内容,支持normal | night | night eighties | night blue | night bright五种代码样式 123456789101112codeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: normal #代码样式主题 # Add copy button on codeblock copy_button: enable: true #表示启用复制按钮 # Show text copy result. show_result: true #表示显示复制结果 # Available values: default | flat | mac style: default #表示代码块风格, default | flat | mac 3个选项 侧边栏 侧边栏有几个选项，position，width，display，offset，onmobile和dimmer,通过修改next/_config.yml文件的sidebar节点 12345678910111213141516171819202122sidebar: # Sidebar Position. position: left #侧边栏位于左侧 #position: right #右侧 # Manual define the sidebar width. If commented, will be default for: # Muse | Mist: 320 # Pisces | Gemini: 240 #width: 300 #宽度 #侧边栏显示条件 # Sidebar Display (only for Muse | Mist), available values: # - post expand on posts automatically. Default.仅在具有索引的帖子中显示侧栏 # - always expand for all pages automatically.在所有页面中显示侧栏 # - hide expand only when click on the sidebar toggle icon.在所有页面中隐藏它（但可以由用户手动打开） # - remove totally remove sidebar including sidebar toggle.完全删除侧栏 display: always # Sidebar offset from top menubar in pixels (only for Pisces | Gemini). offset: 12 #偏移量 # Enable sidebar on narrow view (only for Muse | Mist). onmobile: false 侧边栏社交链接 编辑next/_config.yml下的social节点,放上你的GitHub,email,各种社交地址都行 123456social: # 格式:显示名称: url地址 || 图标 GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@gmail.com || envelope Google: https://plus.google.com/yourname || google Twitter: https://twitter.com/yourname || twitter GitHub Banner 修改next/_config.yml下的github_banner节点内容 1234github_banner: enable: true #默认为false,改为true permalink: https://github.com/jianxin-yuan #你的GitHub地址 title: Follow me on GitHub #鼠标悬停时的提示文字 首页摘要显示 默认情况下首页会显示整个文章内容.这是十分不合适的.一般我们想要的是首页展示一个摘要信息,点击文章查看全部内容.设置的方法有3种 推荐: 使用&lt;!-- more --&gt;标签,在需要展示的摘要内容后加上这个标签,那么标签之前的内容会展示到首页. 用法: 设置固定内容,修改next/_config.yml下的auto_excerpt节点,会展示文章前N字的内容 123auto_excerpt: enable: true #开启length: 300 #字数 修改next/_config.yml中的excerpt_description节点为true,并在文章的Front-matter中设置description,那里首页就会展示description的内容(不推荐.) 1excerpt_description: true 网站页脚设置 修改next/_config.yml下的footer内容 12345678910111213141516171819202122232425262728footer: # Specify the date when the site was setup. If not defined, current year will be used. #since: 2015 # Icon between year and copyright info. icon: # Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/ # `heart` is recommended with animation in red (#ff0000). name: heart #图标 # If you want to animate the icon, set it to true. animated: true #启用动画效果 # Change the color of icon, using Hex Code. color: "#ff0000" #图标颜色 # If not defined, `author` from Hexo `_config.yml` will be used. copyright: powered: # Hexo link (Powered by Hexo). enable: true #显示hexo信息 # Version info of Hexo after Hexo link (vX.X.X). version: true #显示hexo版本 theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: true #显示主题信息 # Version info of NexT after scheme info (vX.X.X). version: true #显示主题版本 # Beian ICP information for Chinese users. See: http://www.beian.miit.gov.cn beian: enable: false icp: 字体 修改next/_config.yml下的font节点内容,NexT设置了5个类别的字体设置,可根据需要修改,内置的都是Google Fonts的字体,当然也可以引入其他字体库,这里我就偷懒不做了….默认字体挺好的😜😜😜 global：整个站点中使用的字体 title ：网站标题使用的字体 headings：文章中标题使用的字体（h1，h2，h3，h4，h5，h6 posts：文章使用的字体 codes：文章中代码块使用的字体 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# ---------------------------------------------------------------# Font Settings# See: https://theme-next.org/docs/theme-settings/#Fonts-Customization# ---------------------------------------------------------------# Find fonts on Google Fonts (https://www.google.com/fonts)# All fonts set here will have the following styles:# light | light italic | normal | normal italic | bold | bold italic# Be aware that setting too much fonts will cause site running slowly# ---------------------------------------------------------------# To avoid space between header and sidebar in scheme Pisces / Gemini, Web Safe fonts are recommended for `global` (and `title`):# Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS# ---------------------------------------------------------------font: # Use custom fonts families or not. # Depended options: `external` and `family`. enable: true # Uri of fonts host, e.g. //fonts.googleapis.com (Default). host: # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: x.x`. Use `em` as unit. Default: 1 (16px) # Global font settings used for all elements inside &lt;body&gt;. global: external: true family: Verdana size: # Font settings for site title (.site-title). title: external: true family: size: # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;). headings: external: true family: size: # Font settings for posts (.post-body). posts: external: true family: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: menlo size: 20 动画 NexT默认是开启了动画效果的,如果不想要,将next/_config.yml下的motion修改为false即可关闭动画,动画有很多值,根据需要配置即可,可多多尝试获取一个自己喜欢的效果 12345678910111213141516171819# Use velocity to animate everything.# For more information: http://velocityjs.orgmotion: enable: true async: false transition: # Transition variants: # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut # swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut # bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut # slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut # slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut post_block: fadeIn #文章块加载动画 post_header: slideDownIn post_body: slideDownIn coll_header: slideLeftIn # Only for Pisces | Gemini. sidebar: slideUpIn #侧边栏加载动画]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub部署个人博客]]></title>
    <url>%2Fblog%2F3573004847.html</url>
    <content type="text"><![CDATA[准备工作 GitHub账号 要将博客部署到GitHub上,首先我们当然要有一个GitHub的账号呀! 🤣🤣🤣 开始吧!新建仓库点击右上角 New repository 新建一个仓库,仓库名称格式: your GitHub Name.github.io 当然,其实这里的名称是可以随便命名的,只是这样的格式会直接将你的项目部署到根目录下,如果不是这样的格式,后续需要修改_config.yml文件中的url和root字段 12345&gt; #URL&gt; #If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'&gt; url: http://yoursite.com&gt; root: /&gt; 即,如果你的仓库名为blog,那么你的博客域名会是your GitHub Name.github.io/blog这个时候需要就url改为上述域名,同时将root改为/blog/,不然你会发现你的博客没有css效果而且需要手动进入项目的 settings &gt; GitHub Pages 手动选择分支(一般直接选master)启动pages服务 配置Hexo 首先安装git deploy 插件 1npm install hexo-deployer-git --save 修改_config.yml文件的deploy字段部分,填上你的repository地址,分支默认master 1234deploy: type: git repo: &lt;your repository address&gt; branch: master 部署到GitHub 运行命令,hexo会将/public/目录下的文件推送到远程仓库 推送前需要配置SSH KEY,不懂的小伙伴可以自行百度一下(手动偷懒🤪🤪🤪) 1hexo clean &amp;&amp; hexo d -g hexo d -g 和hexo g -d作用相同,表示生成文件之后部署到远程 此时,访问https://your GitHub Name.github.io 就可以看到你的个人博客了…]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2Fblog%2F3967644193.html</url>
    <content type="text"><![CDATA[前言首先我们需要知道Hexo是什么? ​ Hexo 是一个快速、简洁且高效的博客框架(Hexo官网简介) ​ 具体请戳下面链接了解详情↓↓↓😂 Hexo 中文文档 环境要求开始之前,我们需要检查电脑上是否安装好了以下应用程序 Node.js Git 如果没有安装.点击下面的地址下载安装[Node.js 下载地址 ] [Git 下载地址] 开始吧安装运行Hexo因为国内使用npm速度较慢,推荐使用淘宝npm镜像.(当然,有梯子的小伙伴可以无视 -_- ) 淘宝npm镜像安装1npm install -g cnpm --registry=https://registry.npm.taobao.org 之后文中出现的npm 命令均可使用cnpm 替换. Hexo安装1npm install -g hexo-cli 初始化 &gt; 运行 新建一个文件夹用于存放hexo资源,然后进入,执行初始化hexo命令 123mkdir blog cd bloghexo init 此时,一个简单的博客其实就已经搭建好了. 接下来,看看效果吧, 启动hexo服务 1hexo s 打开 http://localhost:4000/ 即可看到一个简单的博客了.👏👏👏 hexo 常用命令介绍 hexo new : 新建文件命令.会在/source/_post下新建一个.md文件,编辑这个文件写一个新的博文 hexo generate:生成生成静态文件,可简写hexo g hexo server: 启动服务,可简写 hexo s heox deploy: 推送到远程服务器 可简写hexo d hexo clean: 清除缓存文件 (db.json) 和已生成的静态文件 (public) 当你在本地将个人博客搭建起来后,我们就可以试着将博客部署到GitHub上了,这样就能让更多的小伙伴能看到你写的博文了…]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
